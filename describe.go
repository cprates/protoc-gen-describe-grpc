package main

import (
	"strconv"

	"github.com/cprates/protoc-gen-describe-grpc/option"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)

const deprecationComment = "// Deprecated: Do not use."

var (
	contextPackage = protogen.GoImportPath("context")
	fmtPackage     = protogen.GoImportPath("fmt")
	grpcPackage    = protogen.GoImportPath("google.golang.org/grpc")
)

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_description.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	generateHeader(file, g)

	for _, service := range file.Services {
		genService(g, service)
	}

	return g
}

func generateHeader(file *protogen.File, g *protogen.GeneratedFile) {
	g.P("// Code generated by protoc-gen-describe-grpc. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
}

func genService(g *protogen.GeneratedFile, service *protogen.Service) {
	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the grpc package it is being compiled against.")
	g.P("const _ = ", grpcPackage.Ident("SupportPackageIsVersion7"))
	g.P()

	serverType := service.GoName + "Server"
	g.P("// ", serverType, " is the server API for ", service.GoName, " service.")
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}

	g.P("type ", serverType, " interface {")
	for _, method := range service.Methods {
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			g.P(deprecationComment)
		}
		g.P(method.Comments.Leading, serverMethodSignature(g, method))
	}
	g.P("}")
	g.P()

	// Structure.
	g.P("type ", service.GoName, " struct {")
	g.P("}")
	g.P()

	// Server handler implementations.
	for _, method := range service.Methods {
		genServerMethod(g, method)
	}
}

func serverMethodSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
		return "// stream methods not supported:" + method.GoName
	}

	params := g.QualifiedGoIdent(contextPackage.Ident("Context")) + ", *" +
		g.QualifiedGoIdent(method.Input.GoIdent)

	ret := "(*" + g.QualifiedGoIdent(method.Output.GoIdent) + ", error)"

	return method.GoName + "(" + params + ")" + ret
}

func genServerMethod(g *protogen.GeneratedFile, method *protogen.Method) {
	if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
		return
	}

	params := "ctx " + g.QualifiedGoIdent(contextPackage.Ident("Context")) + ", in *" +
		g.QualifiedGoIdent(method.Input.GoIdent)

	ret := "(*" + g.QualifiedGoIdent(method.Output.GoIdent) + ", error)"

	g.P("func (s *", method.Parent.GoName, ")", method.GoName, "("+params+") "+ret+" {")

	str := strconv.Quote("Method Name: " + method.Parent.GoName + "." + method.GoName)
	g.P(g.QualifiedGoIdent(fmtPackage.Ident("Println")) + "(" + str + ")")
	g.P()
	str = strconv.Quote("Input type: " + method.Input.GoIdent.GoName)
	g.P(g.QualifiedGoIdent(fmtPackage.Ident("Println")) + "(" + str + ")")
	for _, f := range method.Input.Fields {
		str = strconv.Quote("Input field name: " + f.GoName + ", type: " + f.Desc.Kind().String())
		g.P(g.QualifiedGoIdent(fmtPackage.Ident("Println")) + "(" + str + ")")
	}
	if ext := proto.GetExtension(method.Input.Desc.Options(), option.E_MyOption); ext != nil {
		str = strconv.Quote("Extended: " + ext.(string))
		g.P(g.QualifiedGoIdent(fmtPackage.Ident("Println")) + "(" + str + ")")
	}
	g.P()
	str = strconv.Quote("Return type: " + method.Output.GoIdent.GoName)
	g.P(g.QualifiedGoIdent(fmtPackage.Ident("Println")) + "(" + str + ")")
	for _, f := range method.Output.Fields {

		_type := f.Desc.Kind().String()
		switch {
		case f.Desc.IsList():
			_type = "[]" + _type
		case f.Desc.IsMap():
			_type = "map[" + f.Desc.MapKey().Kind().String() + "]" + f.Desc.MapValue().Kind().String()
		}
		str = strconv.Quote("Return field name: " + f.GoName + ", type: " + _type)
		g.P(g.QualifiedGoIdent(fmtPackage.Ident("Println")) + "(" + str + ")")
	}
	g.P()
	g.P("return nil, nil")
	g.P("}")
	g.P()
}
